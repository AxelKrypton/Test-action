on:
  # Trigger the workflow on push or pull request,
  # but only for the main branch
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  check_pull:
    # we use jobs in a matrix.
    # the OS to be used for the test is taken from the current matrix element
    runs-on: ${{ matrix.os }}
    strategy:
      # we want to avoid to stop all the tests the first time that one of them gets an error
      fail-fast: false
      matrix:
        include:
        #here we set up the various matrix elements
        #the entries in each matrix element are just variables, not keywords, with (hopefully) self-explaining names
        # 1st matrix element, default compiler at FIAS
        - os: ubuntu-18.04
          site: "fias"
          packages_to_add: "libboost-all-dev g++-5 doxygen-latex graphviz libgsl-dev"
          c_compiler_to_use: "gcc-5"
          cxx_compiler_to_use: "g++-5"
        # 2nd matrix element, recent LTS Ubuntu distribution with gcc
        - os: ubuntu-20.04
          site: "linux-default-gcc"
          packages_to_add: "libboost-all-dev doxygen-latex graphviz libgsl-dev"
          c_compiler_to_use: "gcc"
          cxx_compiler_to_use: "g++"
        # 3rd matrix element, recent LTS Ubuntu distribution with clang
        - os: ubuntu-20.04
          site: "linux-default-clang"
          packages_to_add: "libboost-all-dev libgsl-dev"
          c_compiler_to_use: "clang"
          cxx_compiler_to_use: "clang++"
        # 4th matrix element, osx 11 with clang
        - os: macos-11
          site: "mac"
          packages_to_add: "boost gsl"
          c_compiler_to_use: "clang"
          cxx_compiler_to_use: "clang++"
        # 5th matrix element, default compiler in Goethe cluster
        - os: ubuntu-18.04
          # this time we do not include boost, we compile it later by ourselves
          site: "goethe"
          packages_to_add: "g++-4.8 libgsl-dev"
          c_compiler_to_use: "gcc-4.8"
          cxx_compiler_to_use: "g++-4.8"
    steps:
    # this is an action provided by GitHub to checkout the repository
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v3
      with:
          python-version: '3.9' # Version range or exact version of a Python version to use, using SemVer's version range syntax
          architecture: 'x64' # optional x64 or x86. Defaults to x64 if not specified
    # we set the name of the step, collecting all the tests in just one step
    - name: code_check
    # we set some environment variables for the specific OS version
      env:
        CC: ${{ matrix.c_compiler_to_use }}
        CXX: ${{ matrix.cxx_compiler_to_use }}
        OS_NAME: ${{ matrix.os }}
        SITE: ${{ matrix.site }}
      # we run the step. We recall that in YAML the pipe symbol "|" means that the follwing lines, including newlines, are interpreted literally
      run: |
        # which version of cmake is used
        cmake --version
        # we set the smash root directory
        export SMASH_ROOT=$PWD
        # we install cmake-format in a dedicated directory and adjust environment
        mkdir $SMASH_ROOT/python-tools && pip install --target $SMASH_ROOT/python-tools cmakelang==0.6.13
        export PYTHONPATH=$SMASH_ROOT/python-tools:$PYTHONPATH
        echo "cmake-format --version"
        PATH=$SMASH_ROOT/python-tools/bin/:$PATH cmake-format --version
        echo "Python version: $(python --version)"
        echo "Pip    version: $(pip --version)"
        # we get cpplint
        wget https://raw.githubusercontent.com/cpplint/cpplint/develop/cpplint.py && chmod +x cpplint.py && mkdir -p $HOME/bin && mv cpplint.py $HOME/bin
        export PATH=$HOME/bin:$PATH
        cpplint.py --version
